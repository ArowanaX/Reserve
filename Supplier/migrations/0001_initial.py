# Generated by Django 4.0.4 on 2022-05-14 09:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('published_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='Residence',
            fields=[
                ('name', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='res_name')),
                ('address', models.TextField(verbose_name='address')),
                ('city', models.CharField(max_length=20)),
                ('img', models.ImageField(blank=True, null=True, upload_to='supplier/')),
                ('type', models.CharField(choices=[('lux', 'lux hotel'), ('h', 'hotel'), ('gh', 'guesthouse')], max_length=10)),
                ('service_hours_start', models.IntegerField()),
                ('service_hours_end', models.IntegerField()),
                ('max_reserve', models.IntegerField()),
                ('detail', models.TextField(blank=True, max_length=300, null=True)),
                ('phone', models.CharField(max_length=12, unique=True, verbose_name='phone')),
                ('profile', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='residenceTOprofile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'residiance',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='tags')),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='create_at')),
            ],
            options={
                'db_table': 'tag',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('number', models.IntegerField(blank=True, null=True, unique=True, verbose_name='number of service')),
                ('title', models.CharField(blank=True, max_length=30, null=True)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('img', models.ImageField(blank=True, null=True, upload_to='supplier/')),
                ('state', models.CharField(blank=True, choices=[('F', 'Full'), ('E', 'Empty')], max_length=10, null=True)),
                ('faciliti', models.CharField(blank=True, choices=[('lux', 'lux'), ('re', 'Refrigerator'), ('so', 'Sofa')], max_length=10, null=True)),
                ('min_price', models.BigIntegerField(blank=True, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='serviceTOcategory', to='Supplier.category', verbose_name='category')),
                ('residence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='serviceTOroom', to='Supplier.residence')),
            ],
            options={
                'db_table': 'service',
            },
        ),
        migrations.CreateModel(
            name='RestaurantMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=30, null=True)),
                ('describtion', models.TextField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='menuTOcategory', to='Supplier.category', verbose_name='category')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='menuTOservice', to='Supplier.service')),
            ],
            options={
                'db_table': 'menu',
            },
        ),
        migrations.CreateModel(
            name='ResidenceOutdoorAlbum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img_outdoor', models.ImageField(blank=True, null=True, upload_to='outdoor/')),
                ('img_name', models.CharField(blank=True, max_length=50, null=True)),
                ('residence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outdootTOresident', to='Supplier.residence')),
            ],
            options={
                'db_table': 'outdooralbum',
            },
        ),
        migrations.CreateModel(
            name='ResidenceIndoorAlbum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img_indoor', models.ImageField(blank=True, null=True, upload_to='indoor/')),
                ('img_name', models.CharField(blank=True, max_length=50, null=True)),
                ('residence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indootTOresident', to='Supplier.residence')),
            ],
            options={
                'db_table': 'indooralbum',
            },
        ),
        migrations.AddField(
            model_name='residence',
            name='tag',
            field=models.ManyToManyField(related_name='residenceTotag', to='Supplier.tag'),
        ),
    ]
